# root loger 是所有日志对象的根元素,配置设置日志的级别,使用的appender
# console 是自定义的appender的name
log4j.rootLogger = ALL,console
# 设置一个处理器 appender  这里就是我们自定义的console
log4j.appender.console = org.apache.log4j.ConsoleAppender
# 设置输出日志的格式
#log4j.appender.console.layout = org.apache.log4j.SimpleLayout
# 可以自定义消息格式的layout对象
log4j.appender.console.layout = org.apache.log4j.PatternLayout
# 自定义格式的表达式
log4j.appender.console.layout.conversionPattern = %r [%-10p] %m  %d{yyyy\u5E74MM\u6708dd\u65E5 HH:mm:ss.SSS}  %c %F %L  %n
# 控制控制台输出的日志信息的字符集编码
log4j.appender.console.encoding=utf-8

# 将日志信息输出到文件中
# 自定义appender   file其实指向的就是FileAppender
log4j.appender.file = org.apache.log4j.FileAppender
# 可以自定义消息格式的layout对象
log4j.appender.file.layout = org.apache.log4j.PatternLayout
# 自定义格式的表达式
log4j.appender.file.layout.conversionPattern = %r [%-10p] %m  %d{yyyy\u5E74MM\u6708dd\u65E5 HH:mm:ss.SSS}  %c %F %L  %n
# 日志文件的名称 也就是输出的位置
log4j.appender.file.file=D:/D/logs/log4j.log
# 追加的方式进行记录日志
log4j.appender.file.append=true
# 缓冲大小
# 设置字符集编码
log4j.appender.file.encoding=utf-8

# 根据日志的大小来拆分文件
# 自定义appender   file其实指向的就是FileAppender
log4j.appender.rolfile = org.apache.log4j.RollingFileAppender
# 可以自定义消息格式的layout对象
log4j.appender.rolfile.layout = org.apache.log4j.PatternLayout
# 自定义格式的表达式
log4j.appender.rolfile.layout.conversionPattern = %r [%-10p] %m  %d{yyyy\u5E74MM\u6708dd\u65E5 HH:mm:ss.SSS}  %c %F %L  %n
# 日志文件的名称 也就是输出的位置
log4j.appender.rolfile.file=D:/D/logs/log4j.log
# 追加的方式进行记录日志
log4j.appender.rolfile.append=true
# 缓冲大小
# 设置字符集编码
log4j.appender.rolfile.encoding=utf-8
# 设置日志文件的大小 ,实际的类型是long,setMaxFileSize会自动帮我们转换,KB,MB, GE
log4j.appender.rolfile.maxFileSize=1MB
# 设置最多生成几个文件，超过之后会进行覆盖
log4j.appender.rolfile.maxBackupIndex=10

# 根据生成的时间进行拆分日志文件
# 自定义appender   file其实指向的就是FileAppender
log4j.appender.dayfile = org.apache.log4j.DailyRollingFileAppender
# 可以自定义消息格式的layout对象
log4j.appender.dayfile.layout = org.apache.log4j.PatternLayout
# 自定义格式的表达式
log4j.appender.dayfile.layout.conversionPattern = %r [%-10p] %m  %d{yyyy\u5E74MM\u6708dd\u65E5 HH:mm:ss.SSS}  %c %F %L  %n
# 日志文件的名称 也就是输出的位置
log4j.appender.dayfile.file=D:/D/logs/log4j-time.log
# 追加的方式进行记录日志
log4j.appender.dayfile.append=true
#日志拆分规则，根据日志的时间进行拆分    我们这里按秒进行拆分
log4j.appender.dayfile.datePattern='.'yyyy-MM-dd HH-mm-ss

# 将信息存放到数据库  org.apache.log4j.jdbc.JDBCAppender  数据库的日志处理器
log4j.appender.logdb = org.apache.log4j.jdbc.JDBCAppender
# 可以自定义消息格式的layout对象
log4j.appender.logdb.layout = org.apache.log4j.PatternLayout
# 自定义格式的表达式
log4j.appender.logdb.layout.conversionPattern = %r [%-10p] %m  %d{yyyy\u5E74MM\u6708dd\u65E5 HH:mm:ss.SSS}  %c %F %L  %n

# 连接数据库的设置
log4j.appender.logdb.Driver=com.mysql.jdbc.Driver
log4j.appender.logdb.URL=jdbc:mysql://127.0.0.1:3306/day25
log4j.appender.logdb.User=root
log4j.appender.logdb.Password=root
log4j.appender.logdb.Sql=INSERT INTO log(project_name,create_date,level,category,file_name,thread_name,line,all_category,message) values('itcast','%d{yyyy-MM-ddHH:mm:ss}','%p','%c','%F','%t','%L','%l','%m')